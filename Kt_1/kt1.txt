컨스트레인레이아웃의 경우 
모든 컨트롤 들이 서로 연결되어있음 즉 마진값으로 떨어져 있음
 레이아웃에서 마진값을 줄 수 있음

Hello world
//fun 함수임을 나타냄 //main 함수이름
//args : Array<String> 함수 인자를 나타낼 때 변수명:타입 순서대로
fun main(args : Array<String>)
{
	println("Hello, World!"); //출력문 안드와 동일
}

java
int temp = 10;  
vs 
var temp = 15 
val temp: Int = 10 

val과 var의 차이
val 변할 수 없는 상수 자바에선 final = 초기화 이후엔 변할 수 없는 값 생성시점에서 초기화 해야함
var 일반적 변수 지정하지 않아도 오류가 없음 다만 지정하는편이 좋음

함수 생성
public int sum(int a, int b) {
  return a + b;
}  //자바에선


fun sum(a: Int, b: Int): Int {
  return a + b
}//코틀린 에선

함수라는걸 알려주는 fun 함수명을 나타내는 sum 
a,b = 변수 명 Int 변수 타입 
:(콜론) 뒤에 리턴 타입
안쪽엔 리턴 값 

아래와 같이 Type을 정의하여 return을 정의하거나
fun sum(a: Int, b: Int): Int = a + b
또는 아래와 같이 바로 return도 가능합니다.
fun sum(a: Int, b: Int) = a + b

한줄로 가능함

조건식을 추가하면 이렇게 됨
fun max(a: Int, b: Int): Int {
  if (a > b) return a
  else return b
}
||
fun max(a: Int, b: Int) = if (a > b) a else b
